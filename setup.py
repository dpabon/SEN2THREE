#!/usr/bin/env python
#
# Sen2Three setup script
# 
# usage: 
# to build distribution for windows:
# 	'python setup.py sdist --formats=zip'
# else:
# 	'python setup.py sdist --formats=gztar'
# to install at target system:
#	'python setup.py install' and follow the instructions ...
#

from setuptools import setup, find_packages
from distutils.dir_util import mkpath, copy_tree
from distutils.file_util import copy_file
import os, sys, platform
import urllib
import zipfile, tarfile

name = 'sen2three'
version = '1.0.0'

def copyConfiguration():
	sys.stdout.write('\nSen2Three ' + version + ' setup script:\n')
	sys.stdout.write('This will finish the configuration of the environment settings.\n')
	user_input = raw_input('\nOK to continue? [y/n]: ')
	if user_input == 'n':
		return False
	
	cfgf = '/L3_GIPP.xml'
	srcf = modulefolder + '/cfg' + cfgf
	try:
		SEN2THREE_HOME = os.environ['SEN2THREE_HOME']
		sys.stdout.write('\nConfiguration will be copied to:\n')
		sys.stdout.write(SEN2THREE_HOME + '/cfg\n')
		s2l2appcfg = SEN2THREE_HOME  + '/cfg'
		mkpath(s2l2appcfg)
		tgtf= s2l2appcfg + cfgf
		copy_file(srcf, tgtf)
	except:
		if system == 'Windows':
			SEN2THREE_HOME = cfghome + '\\sen2three'
		else:
			SEN2THREE_HOME = cfghome + '/sen2three'
		break_condition = True
		while True:
			sys.stdout.write('\nPlease input a path for the Sen2Three home directory:\n')
			sys.stdout.write('default is: ' + SEN2THREE_HOME + '\n')
			user_input = raw_input('Is this OK? [y/n]: ')
			if user_input == 'n':
				SEN2THREE_HOME = raw_input('New path: ')
				sys.stdout.write('New path is: ' + SEN2THREE_HOME +'\n')
				user_input = raw_input('Is this OK? [y/n]: ')
				if user_input == 'y':
					break_condition = True
				else:
					break_condition = False
			else:
				break_condition = True

			os.environ['SEN2THREE_HOME'] = SEN2THREE_HOME
			s2l2appcfg = SEN2THREE_HOME  + '/cfg'
			mkpath(s2l2appcfg)
			copy_file(srcf, s2l2appcfg + cfgf)
			if break_condition == True:
				break

	sys.stdout.write('Setting environment for Sen2Three ...\n')
	if system == 'Windows':
		# setting the environments for the application under Windows:
		try:
			path = os.environ['PATH']
			osgeo = sys.prefix + '\\Lib\\site-packages\osgeo'
			if ('osgeo' in path) == False:

				path = '"' + path + '";' + osgeo
				setPath = 'setx PATH ' + path
				sys.stdout.write('Adding GDAL binaries to PATH:')
				os.system(setPath)
			setGDAL_DATA = 'setx GDAL_DATA ' + osgeo + '\\data\\gdal'
			sys.stdout.write('Setting environment variable GDAL_DATA:')
			os.system(setGDAL_DATA)
			setSEN2THREE_HOME = 'setx SEN2THREE_HOME ' + SEN2THREE_HOME
			sys.stdout.write('Setting environment variable SEN2THREE_HOME:')
			os.system(setSEN2THREE_HOME)
			setSEN2THREE_BIN = 'setx SEN2THREE_BIN ' + modulefolder
			sys.stdout.write('Setting environment variable SEN2THREE_BIN:')
			os.system(setSEN2THREE_BIN)
		except:
			sys.stderr.write('Error in environment settings!\n')
			return False
		sys.stdout.write('Congratulations, you are done!')
	else:
		# setting the environments for the application into L3_Bashrc (Linux and MacOSX):
		L3_Bashrc = '#!/usr/bin/env bash\n'
		L3_Bashrc += '# SEN2THREE environmental setup, version ' + version +'\n'
		L3_Bashrc += '# settings automatically generated by setup.py\n'
		L3_Bashrc += '# source this script either manually via: "source L3_Bashrc"\n'
		L3_Bashrc += '# or call it from your .bashrc or .profile script\n#\n'
		if system == 'Darwin':
			L3_Bashrc += 'export LC_ALL=en_US.UTF-8\n'
			L3_Bashrc += 'export LANG=en_US.UTF-8\n'
		L3_Bashrc += 'export SEN2THREE_HOME=' + SEN2THREE_HOME + '\n'
		L3_Bashrc += 'export SEN2THREE_BIN=' + modulefolder + '\n'
		gdaldata = sys.prefix + '/share/gdal'
		L3_Bashrc += 'export GDAL_DATA=' + gdaldata + '\n'
		sys.stdout.write('Creating L3_Bashrc script under:\n' + SEN2THREE_HOME + '\n')
		try:
			textFile = open(SEN2THREE_HOME + '/L3_Bashrc', 'w')
			textFile.write(L3_Bashrc)
			textFile.close()
		except:
			sys.stderr.write('Cannot create the L3_Bashrc script under:\n' + SEN2THREE_HOME + '\n')
			return False

		# create the glymur configuration file for OpenJPEG2:
		glymurrc = '[library]\n'
		glymurrc += 'openjp2: ' + libOpj2Target + '\n'
		glymurrcPath = cfghome + '/.config/glymur'
		glymurrcFile = glymurrcPath + '/glymurrc'
		sys.stdout.write('Creating the configuration file for OpenJPEG2 under:\n' + glymurrcPath + '\n\n')
		try:
			mkpath(glymurrcPath)
		except:
			sys.stdout.write('Path already exists ...')
		try:
			textFile = open(glymurrcFile, 'w')
			textFile.write(glymurrc)
			textFile.close()
		except:
			sys.stderr.write('Cannot create the configuration file for OpenJPEG2 under:\n ' + glymurrcPath + '\n\n')
			return False
	
		sys.stdout.write('Congratulations, you are nearly done ...\n')
		sys.stdout.write('Last step: cd to ' + SEN2THREE_HOME + ',\n')
		sys.stdout.write('source the <L3_Bashrc> script either manually via: "source L3_Bashrc"\n')
		sys.stdout.write('or integrate this call in your .bashrc or .profile script. Afterwards,\n')

	sys.stdout.write('- you can call the processor from everywhere via: "L3_Process"\n')
	sys.stdout.write('- you will find the default configuration called "L3_GIPP.xml" under:\n' + s2l2appcfg + '\n\n')		
	return True

setup(
	name = name,
	version = version,
	description = 'Sen2Three: Sentinel 3 Spatio Temporal Processor',
	long_description = open('README.md').read(),
	author = 'Telespazio VEGA Deutschland GmbH',
	author_email = 'sen2three@telespazio-vega.de',
	url = 'www.telespazio-vega.de',
	packages = ['sen2three'],
	include_package_data = True,
	platforms=['linux-x86_64', 'macosx-10.5-x86_64', 'win-amd64'],
	entry_points={
		'console_scripts': ['L3_Process = sen2three.L3_Process:main']
	},
	zip_safe = False,
)

try:
	sys.argv[1] == True
except:
	sys.stderr.write('argument must either be "sdist" or "install ..."\n')
	sys.exit(0)
if (sys.argv[1] != 'install'):
	sys.exit(0)

system = platform.system()
if system == 'Darwin':
	cmdstr = 'conda install --yes gdal'
	prefix = sys.prefix + '/lib/python2.7/site-packages'
	modulefolder = prefix + '/' + name + '-' + version + '-py2.7.egg/sen2three'
	buildfolder = modulefolder + '/build'
	platform = '/lib.macosx-10.5-x86_64-2.7'
	libopj2 = '/libopenjp2.dylib'
	targetfolder = sys.prefix + '/lib'
	try:
		cfghome =  os.environ['XDG_CONFIG_HOME']
	except:
		cfghome = os.environ['HOME']
elif system == 'Linux':
	cmdstr = 'conda install --yes gdal'
	prefix = sys.prefix + '/lib/python2.7/site-packages'
	modulefolder = prefix + '/' + name + '-' + version + '-py2.7.egg/sen2three'
	buildfolder = modulefolder + '/build'
	platform = '/lib.linux-x86_64-2.7'
	libopj2 = '/libopenjp2.so'
	targetfolder = sys.prefix + '/lib'
	try:
		cfghome =  os.environ['XDG_CONFIG_HOME']
	except:
		cfghome = os.environ['HOME']
elif system == 'Windows':
	cmdstr = 'conda install --yes gdal=1.11.1'
	prefix = sys.prefix + '\\Lib\\site-packages'
	modulefolder = prefix + '\\' + name + '-' + version + '-py2.7.egg\\sen2three'
	buildfolder = modulefolder + '\\build'
	platform = '\\lib.win-amd64-2.7'
	libopj2 = '\\openjp2.dll'
	targetfolder = sys.prefix + '\\Scripts'
	cfghome =  os.environ['USERPROFILE'] + '\\documents'

os.system(cmdstr)
os.system('conda install --yes --channel https://conda.binstar.org/osgeo proj4')
os.system('conda install --yes --channel https://conda.binstar.org/sunpy glymur')
os.system('conda update pytables')
os.system('conda clean --yes --tarballs --index-cache --packages --source-cache')

libOpj2Source = buildfolder + platform + libopj2
libOpj2Target = targetfolder + libopj2
copy_file(libOpj2Source, libOpj2Target)
if copyConfiguration() == True:
	sys.stdout.write('Installation sucessfully performed.\n')
else:
	sys.stdout.write('Errors during installation occurred.\n')
sys.exit(0)

if __name__ == '__main__':
	pass
